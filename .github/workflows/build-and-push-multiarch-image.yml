name: Build and push multi-arch image

on:
  workflow_call:
    inputs:
      ecrRepositoryName:
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      dockerfilePath:
        required: false
        type: string
        default: Dockerfile
      buildArgs:
        required: false
        type: string
      gitRef:
        required: false
        type: string
        default: ${{ github.sha }}
    outputs:
      imageTag:
        description: "The image tag for the built image"
        value: ${{ jobs.build-and-push-image.outputs.imageTag }}

jobs:
  build-and-push-image:
    name: Build and push image for ${{ inputs.ecrRepositoryName }}
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
        include:
          - arch: amd64
            runner: ubuntu-latest
          - arch: arm64
            runner: arm64-runner
    runs-on: ${{ matrix.runner }}
    outputs:
      imageTag: ${{ steps.meta.outputs.version }}
      localSha: ${{ steps.local-head.outputs.sha }}
    permissions:
      id-token: write
      contents: read
    steps:
      # TODO: remove this step once GitHub's ARM runner image comes with Docker.
      - name: Install Docker (GitHub ARM Only)
        if: matrix.runner == 'arm64-runner'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq --no-install-recommends acl ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" \
            | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update -qq
          sudo apt-get install -qq --no-install-recommends docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo usermod -aG docker "$USER"
          sudo setfacl --modify "user:$USER:rw" /var/run/docker.sock

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.gitRef }}
          show-progress: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::172025368201:role/github_action_ecr_push"
          aws-region: eu-west-1
          role-session-name: ecr-push

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - uses: docker/setup-buildx-action@v3

      - run: echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
        id: local-head

      - name: Generate Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecrRepositoryName }}
          labels: |
            org.opencontainers.image.vendor=GDS
          tags: |
            type=raw,priority=500,value=${{ inputs.gitRef }},enable=${{ startsWith(inputs.gitRef, 'v') }}
            type=raw,priority=400,value=${{ steps.local-head.outputs.sha }},enable=${{ !startsWith(inputs.gitRef, 'v') }}

      - id: build-image
        uses: docker/build-push-action@v5
        with:
          file: ${{ inputs.dockerfilepath }}
          context: .
          platforms: "linux/${{ matrix.arch }}"
          load: true
          provenance: false
          build-args: ${{ inputs.buildArgs }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecrRepositoryName }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=build-${{ matrix.arch }}
          cache-to: type=gha,scope=build-${{ matrix.arch }},mode=max

      - id: export-digests
        env:
          DIGEST: "${{ steps.build-image.outputs.digest }}"
        run: |
          mkdir -p /tmp/digests
          touch "/tmp/digests/${DIGEST#sha256:}"

      - id: upload-digests
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.arch }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
          overwrite: true

  combine_manifests:
    name: Create Docker Manifests for Built Images
    needs:
      - build-and-push-image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      # TODO: remove this step once GitHub's ARM runner image comes with Docker.
      - name: Install Docker (GitHub ARM Only)
        if: matrix.runner == 'arm64-runner'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq --no-install-recommends acl ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" \
            | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update -qq
          sudo apt-get install -qq --no-install-recommends docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo usermod -aG docker "$USER"
          sudo setfacl --modify "user:$USER:rw" /var/run/docker.sock

      - name: Download Digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - uses: docker/setup-buildx-action@v3

      - run: echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
        id: local-head

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::172025368201:role/github_action_ecr_push"
          aws-region: eu-west-1
          role-session-name: ecr-push

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Generate Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecrRepositoryName }}
          labels: |
            org.opencontainers.image.vendor=GDS
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,priority=500,value=${{ inputs.gitRef }},enable=${{ startsWith(inputs.gitRef, 'v') }}
            type=raw,priority=400,value=${{ needs.build-and-push-image.outputs.localSha }},enable=${{ !startsWith(inputs.gitRef, 'v') }}

      - name: Create Manifest Lists
        env:
          IMAGEREF_PREFIX: '${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecrRepositoryName }}'
        working-directory: /tmp/digests
        run: |
          tag_args=$(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON")
          printf -v sources "${IMAGEREF_PREFIX}@sha256:%s " *
          # shellcheck disable=SC2086 # Intentional word-splitting on $tag_args and $sources.
          docker buildx imagetools create $tag_args $sources

      - name: Inspect Images
        env:
          IMAGEREF: '${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecrRepositoryName }}:${{ steps.meta.outputs.version }}'
        run: |
          docker buildx imagetools inspect "$IMAGEREF"
