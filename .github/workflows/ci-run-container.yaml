name: Run container

on:
  workflow_call:
    inputs:
      extraSystemDependencies:
        description: 'Install additional system dependencies'
        required: false
        default: ''
        type: string
      enableMongoDB:
        description: 'Run MongoDB'
        required: false
        default: false
        type: boolean

jobs:
  run-container:
    name: Run container
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: test
      GOVUK_CONTENT_SCHEMAS_PATH: vendor/publishing-api/content_schemas
      TEST_DATABASE_URL: mysql2://root:root@127.0.0.1:3306/test
    steps:
       - name: Setup Redis
         if: ${{ inputs.enableRedis }}
         env:
           REDIS_IMAGE_TAG: 6-alpine
           REDIS_PORT: 6379
         run: |
           # Start container
           docker run --name redis \
            --detach \
            --publish $REDIS_PORT:6379 \
            --health-cmd "redis-cli ping" \
            --health-interval 10s \
            --health-timeout 5s \
            --health-retries 5 \
            redis:$REDIS_IMAGE_TAG

           echo "Wait for container '$container_name' to be healthy for max $timeout seconds..."
           for i in `seq ${timeout}`; do
               get_health_state
               state=$?
               if [ ${state} -eq 0 ]; then
                   echo "Container is healthy after ${i} seconds."
                   exit 0
               fi
             sleep 1
           done

           echo "Timeout exceeded. Health status returned: $(docker inspect -f '{{ .State.Health.Status }}' ${container_name})"
           exit 1

       - name: Setup MySQL
         id: setup-mysql
         if: ${{ inputs.enableMySQL }}
         env:
           MYSQL_PORT: 3306
           MYSQL_IMAGE_TAG: 8.0
         run: |
           # Stop the MySQL service running on the runner node
           sudo service mysql stop

           # Start 
           docker run --name mysql \
            --detach \
            --publish $MYSQL_PORT:3306 \
            --env MYSQL_ROOT_PASSWORD=root \
            --health-cmd "mysqladmin ping" \
            --health-start-period 10s \
            --health-interval 10s \
            --health-timeout 5s \
            --health-retries 5 \
            mysql:$MYSQL_IMAGE_TAG

           # Wait for MySQL to be ready to accept connections
           sleep 15
           # Create user for running tests
           MYSQL_COMMAND="mysql -h 127.0.0.1 -P ${MYSQL_PORT} -u root"
           $MYSQL_COMMAND -e "CREATE USER '${MYSQL_USERNAME}'@'%' IDENTIFIED BY '${MYSQL_PASSWORD}';"
           $MYSQL_COMMAND -e "GRANT ALL PRIVILEGES ON *.* TO '${MYSQL_USERNAME}'@'%' WITH GRANT OPTION;"
           $MYSQL_COMMAND -e "FLUSH PRIVILEGES;"
           echo "::set-output name=db-url::mysql2://${MYSQL_USERNAME}:${MYSQL_PASSWORD}@127.0.0.1:3306"

