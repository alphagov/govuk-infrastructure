name: Build and push image

on:
  workflow_call:
    inputs:
      ecrRepositoryName:
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      dockerfilePath:
        required: false
        type: string
        default: Dockerfile
      buildArgs:
        required: false
        type: string
      gitRef:
        required: false
        type: string
        default: ${{ github.sha }}
    outputs:
      imageTag:
        description: "The image tag for the built image"
        value: ${{ jobs.build-and-push-image.outputs.imageTag }}

jobs:
  build-and-push-image:
    name: Build and push image
    runs-on: ubuntu-latest
    outputs:
      imageTag: ${{ steps.determine-image-tag.outputs.imageTag }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.gitRef }}
          show-progress: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          role-to-assume: "arn:aws:iam::172025368201:role/github_action_ecr_push"
          aws-region: eu-west-1
          role-session-name: ecr-push

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine image tag
        id: determine-image-tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecrRepositoryName }}
          INPUT_REF: ${{ inputs.gitRef }}
        run: |
          LOCAL_HEAD_SHA="$(git rev-parse HEAD)"
          REMOTE_HEAD_SHA=$(git ls-remote origin HEAD | cut -f 1)

          if [[ "${INPUT_REF}" == v* ]]; then
            IMAGE_TAG="${INPUT_REF}"
          else
            IMAGE_TAG="release-${LOCAL_HEAD_SHA}"
          fi

          FULL_IMAGE_TAG_LIST="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

          # Add latest tag if most recent commit
          if [ "${REMOTE_HEAD_SHA}" = "${LOCAL_HEAD_SHA}" ]; then
            echo "Local commit is the same as the repository HEAD so adding the latest tag (commit: ${REMOTE_HEAD_SHA})"
            FULL_IMAGE_TAG_LIST+=",${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
          else
            echo "Local commit is different to the repository HEAD so skipping the latest tag (local: ${LOCAL_HEAD_SHA} remote: ${REMOTE_HEAD_SHA})"
          fi

          echo "imageTag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "fullImageTagList=${FULL_IMAGE_TAG_LIST}" >> $GITHUB_OUTPUT

      - name: Check for existing image
        id: existing-image
        env:
          ECR_REPOSITORY: ${{ inputs.ecrRepositoryName }}
          IMAGE_TAG: ${{ steps.determine-image-tag.outputs.imageTag }}
        run: |
          check_image_in_ecr() {
            aws ecr describe-images --repository-name="${1}" --image-ids=imageTag="${2}" 2> /dev/null
          }

          if check_image_in_ecr "${ECR_REPOSITORY}" "${IMAGE_TAG}"; then
            echo "Found existing image in ${ECR_REPOSITORY} with the tag ${IMAGE_TAG}. Will not build image again."
            echo "present=true" >> $GITHUB_OUTPUT
          else
            echo "present=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push
        if: steps.existing-image.outputs.present == 'false'
        uses: docker/build-push-action@v5
        with:
          file: ${{ inputs.dockerfilepath }}
          build-args: ${{ inputs.buildArgs }}
          context: .
          push: true
          tags: ${{ steps.determine-image-tag.outputs.fullImageTagList }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
