# USAGE
# -----
#
# on: [push, pull_request]
#
# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v4
#       with:
#         show-progress: false
#     - uses: ruby/setup-ruby@v1
#       with:
#         bundler-cache: true
#     - run: bundle exec rake
#
#   publish:
#     needs: test
#     if: github.ref == 'refs/heads/main'
#     permissions:
#       contents: write
#     uses: alphagov/govuk-infrastructure/.github/workflows/publish-rubygem.yaml@main
#     secrets:
#       GEM_HOST_API_KEY: ${{ secrets.ALPHAGOV_RUBYGEMS_API_KEY }}

# REUSABLE WORKFLOW
# -----------------
name: Publish a Rubygem

on:
  workflow_call:
    inputs:
      gem_name:
        required: false
        type: string
        default: ${{ github.event.repository.name }}
    secrets:
      GEM_HOST_API_KEY:
        required: true

jobs:
  publish:
    name: Publish gem
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        show-progress: false
    - uses: ruby/setup-ruby@v1
      with:
        rubygems: latest
        bundler-cache: true
    - name: "Determine HEAD of default branch"
      id: fetch_default_branch_head
      run: echo "sha=$(git ls-remote origin HEAD | cut -f 1)" >> "$GITHUB_OUTPUT"
    - if: github.sha == steps.fetch_default_branch_head.outputs.sha
      name: "Check if gem needs publishing"
      env:
        GEM_NAME: ${{ inputs.gem_name }}
        GEM_HOST_API_KEY: ${{ secrets.GEM_HOST_API_KEY }}
      run: |
        LOCAL_VERSION=$(ruby -e "puts eval(File.read('$GEM_NAME.gemspec')).version")
        REMOTE_VERSION=$(gem list --exact --remote $GEM_NAME)
        if [ "$REMOTE_VERSION" != "$GEM_NAME (${LOCAL_VERSION})" ]; then
          gem build ${GEM_NAME}.gemspec
          gem push "${GEM_NAME}-${LOCAL_VERSION}.gem"
        else
          echo "Skipping gem publish because version (${LOCAL_VERSION}) is already published"
        fi

        if ! git ls-remote --tags --exit-code origin v${LOCAL_VERSION}; then
          git tag v${LOCAL_VERSION}
          git push --tags
        else
          echo "Skipping git tagging because tag (v${LOCAL_VERSION}) already exists"
        fi
    - if: github.sha != steps.fetch_default_branch_head.outputs.sha
      name: "Skip publish: commit is not HEAD of default branch"
      run: |
        echo "Skipping publish because commit (${GITHUB_SHA}) isn't the HEAD of the default branch (${{ steps.fetch_default_branch_head.outputs.sha }})"
