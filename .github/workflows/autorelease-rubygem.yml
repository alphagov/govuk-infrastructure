# USAGE
# -----
#
# on:
#   workflow_dispatch: {}
#   schedule:
#     - cron: '00 13 * * 2'
#
# jobs:
#   autorelease:
#     uses: alphagov/govuk-infrastructure/.github/workflows/autorelease-rubygem.yml@main
#     secrets:
#       GH_TOKEN: ${{ secrets.GOVUK_CI_GITHUB_API_TOKEN }}

name: Auto-release Rubygem

on:
  workflow_call:
    inputs:
      gem_name:
        required: false
        type: string
        default: ${{ github.event.repository.name }}
    secrets:
      GH_TOKEN:
        required: true

jobs:
  release:
    name: Release Gem
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        show-progress: false
        token: ${{ secrets.GH_TOKEN }}
    - uses: ruby/setup-ruby@v1
      with:
        rubygems: latest
        bundler-cache: true
    - name: "Determine HEAD of default branch"
      id: fetch_default_branch_head
      run: echo "sha=$(git rev-parse origin/HEAD)" >> "$GITHUB_OUTPUT"
    - if: github.sha == steps.fetch_default_branch_head.outputs.sha
      name: "Auto-release rubygem"
      env:
        GEM_NAME: ${{ inputs.gem_name }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        set -euo pipefail

        CURR_VERSION=$(ruby -e "puts eval(File.read('$GEM_NAME.gemspec')).version")
        NEXT_VERSION=$(echo $CURR_VERSION | cut -d . -f1).$(echo $CURR_VERSION | cut -d . -f2).$(( $(echo $CURR_VERSION | cut -d . -f3) + 1 ))
        BRANCH="release-$NEXT_VERSION"
        PR_TITLE="Release v$NEXT_VERSION"
        PR_DESCRIPTION="This is an automated PR to bump the version number to $NEXT_VERSION. This is a patch-level bump, as the only changes since v$CURR_VERSION are dependency updates made by Dependabot."

        if ! [ -f CHANGELOG.md ]; then
          echo "CHANGELOG.md does not exist. Exiting."
          exit 0
        fi

        if ! grep -qR --include "version.rb" --include "*.gemspec" $CURR_VERSION; then
          echo "Can't find version.rb or *.gemspec containing the string '$CURR_VERSION'. Exiting."
          exit 0
        fi

        if git ls-remote --exit-code origin refs/heads/$BRANCH > /dev/null; then
          echo "Branch 'release-$NEXT_VERSION' already exists on the remote. Exiting."
          exit 0
        fi

        if [ "$(git log v$CURR_VERSION..main --no-merges --format=format:%an | sort | uniq)" != "dependabot[bot]" ]; then
          echo "Gem has no unreleased changes, or those changes include commits from users other than Dependabot. Exiting."
          exit 0
        fi

        find . -type f \( -iname version.rb -o -iname *.gemspec \) -exec sed -i "s/$CURR_VERSION/$NEXT_VERSION/g" {} \;

        printf "# $NEXT_VERSION\n\n* Update dependencies\n\n" | cat - CHANGELOG.md > NEW_CHANGELOG.md
        mv NEW_CHANGELOG.md CHANGELOG.md

        git config --global user.name "GOV.UK Continuous Integration User"
        git config --global user.email "govuk-ci@users.noreply.github.com"

        git checkout -b $BRANCH
        git add .
        git commit -m "$PR_TITLE"
        git push origin $BRANCH

        gh pr create -H $BRANCH --title "$PR_TITLE" --body "$PR_DESCRIPTION"
    - if: github.sha != steps.fetch_default_branch_head.outputs.sha
      name: "Skip release: commit is not HEAD of default branch"
      run: |
        echo "Skipping release because commit (${GITHUB_SHA}) isn't the HEAD of the default branch (${{ steps.fetch_default_branch_head.outputs.sha }})"
